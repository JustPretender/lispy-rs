# -*- mode: org; -*-
#+title: Lispy-rs
#+startup: showall

[[https://github.com/JustPretender/lispy-rs/workflows/Rust/badge.svg?branch=master][https://github.com/JustPretender/lispy-rs/workflows/Rust/badge.svg]]

* Introduction
  =Lispy-rs= is my attempt to implement *Lispy* from [[http://www.buildyourownlisp.com/][BuildYourOwnLisp]] book.
  I know there exists another, cool project: [[https://github.com/deciduously/blispr][blispr]], however I decided not to follow it and do everything
  from scratch by myself (for education purposes). In case some things seem similar - it's mostly due to
  both Blispr and Lispy-rs following the book type naming.

  This implementation follows the book chapters and loosely the code style where it makes sense. Due to Rust being
  newer and more advanced language than C, I took a liberty of using some of the Rust modern features such as enums,
  that hold data, /Result/ for error handling, etc.

* Status
  *Completed ch.15* (without bonus marks). Stay tuned.

* Dependencies
  - Stable [[https://www.rust-lang.org/][Rust]]
  - [[https://pest.rs/][Pest]]. Parsing expression grammar parser for =Lispy='s grammar;
  - [[https://crates.io/crates/rustyline/][Rustyline]]. For =Lispy='s REPL implementation;
  - [[https://docs.rs/env_logger/0.7.1/env_logger/][env_logger]] and [[https://docs.rs/log/0.4.10/log/][log]]. For logging :)

* Building
  Just run ~cargo build --release~. The resulting binary will be located in =target/release/=.

* Running
** REPL
   Just run ~cargo run~ or ~target/release/lispy-rs~. This will get you into =Lispy='s REPL.
   The list of supported built-ins:
   - =+,-,*,/,%,^,min,max=. Mathematical operators;
   - =list=. Creates a list from provided arguments;
   - =join=. Takes two lists and joins them together;
   - =tail=. Takes a list as an argument and returns everything but the first element;
   - =head=. Takes a list as an argument and returns the first element;
   - =init=. Takes a list as an argument and returns everything but the final element;
   - =cons=. Takes two arguments and constructs a new Q-Expression made of those arguments;
   - =eval=. Takes a Q-Expression and evaluates it;
   - =. Defines a variable in the local environment;
   - =def=. Defines a variable in the global environment;
   - =\\=. Defines a =lambda= function;
   - ==, !=, >, <, >=, <=. Comparison operators;
   - =if=. Conditional operator;
   - =||, &&, !=. Logical operators;
   - =exit=. A special function that terminates the REPL;
   - =false,true=. Built-in boolean variables;
   - =load=. Loads and executes code from files;
   - =print=. Prints all its arguments into /stdout/;
   - =error=. Converts its first argument into an error;

   Those built-in constitute the core of */Lispy/* and should be enough to define your own functions and play around.

   You can also use =prelude.lspy= to load the /standard library/. It contains functions such as =filter=, =map=, =fold=, =let=, etc.
   To do this - enter the REPL and do ~load "prelude.lspy"~. After that you can start using them too.
*** Examples
    Addition
    #+begin_example
    lispy> + 1 2
    3
    #+end_example

    List head
    #+begin_example
    lispy> head {1 2}
    {1}
    #+end_example

    Partial evaluation
    #+begin_example
    lispy> fun {add-together x y} {+ x y}
    ()
    lispy> def {add1} (add-together 1)
    ()
    lispy> add1 2
    3
    #+end_example

    Currying
    #+begin_example
    lispy> fun {curry f xs} {eval (join (list f) xs)}
    ()
    lispy> curry + {5 6 7}
    18
    lispy> fun {uncurry f & xs} {f xs}
    ()
    lispy> uncurry head 5 6 7
    {5}
    #+end_example

    List reversal
    #+begin_example
    lispy> (fun {reverse l} {
    if (== l {})
    {{}}
    {join (reverse (tail l)) (head l)}
    })
    ()
    lispy> reverse {1 2 3}
    {3 2 1}
    lispy> reverse 1
    ERROR: tail passed invalid type. Expected Lval::QExpr(_). Given 1!
    #+end_example

    Standard library functions
    #+begin_example
    lispy-rs> load "prelude.lspy"
    ()
    lispy> map (curry +) (split 2 {10 20 30 40})
    {30 70}
    lispy>
    #+end_example

    Nth Fibonacci number (my version)
    #+begin_example
    lispy> fun {fib N}
    {
      if (== 0 N)
         {0}
         {
           if (== 1 N)
              {1}
              {+ (fib (- N 1)) (fib (- N 2))}
         }
    }
    lispy> fib 20
    #+end_example

    For more examples just check *Ch.15* of the book. I don't see the point in copy-pasting them here.
** File evaluation
   Just run ~cargo run file1 [file2 ...]~ or ~target/release/lispy-rs file1 [file2 ...]~. This will evaluate supplied files one by one.
*** Examples
    #+begin_example
    ~# echo "(print (* (eval (head {1 2 3})) (eval (head {4 5 6}))))" > test.lspy
    ~# lispy-rs test.lspy
    4
    #+end_example
* Debugging
  Run ~RUST_LOG="info,lispy_rs::lispy=debug" cargo run~. In this mode =Lispy= will print debug messages that should help you to find out what's going. It's not necessarily easy due to
  its recursive nature.

* Benchmarking
  I decided to play with [[https://docs.rs/criterion/0.3.1/criterion/][Criterion]] to benchmark my implementation(s) of the =Lval= type. It's in a very infant state (even more than the rest of the project).

* TODOs [1/9]
  - [X] Add floating point support. Added. Testing now. I still have to read https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and make sure that I'm not missing something important;
  - [ ] At the moment logic around integers is a bit flaky. I used the biggest signed integer type to represent number, but this has to be revisited too;
  - [ ] Figure out how to use the /=/ operator. The book doesn't really covers that with examples (this actually comes later).
  - [ ] I skipped certain bonus points to speed up the development. Some of them are very interesting and should be added;
  - [ ] The whole jazz with =LEnv= and wrapping it into =Rc<RefCell<>>= should be revisited;
  - [ ] I'm currently using a lot of ~as_<type>()~ methods. I believe there should be an easier way (type coercion?);
  - [ ] Add proper multi-line support;
  - [ ] Add help;
  - [ ] Figure out why my implementation of Fibonacci numbers, provided above, is much faster than the one in =prelude.lspy=.
        I guess it has something to do with how we interact with environment.
